buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '1.16.5-0.5.8l'
group = 'fr.frinn.custommachinery' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'custommachinery'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

sourceSets {
    api
    main{
        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.api.output
        ext.refMap = "main.refmap.json"
    }
    test
}

configurations {
    apiImplementation.extendsFrom(implementation)
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=custommachinery.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                custommachinery {
                    source sourceSets.main
                    source sourceSets.api
                }
            }

            accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        }

        client2 {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=custommachinery.mixins.json"

            args '--username', 'Dev2'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                custommachinery {
                    source sourceSets.main
                    source sourceSets.api
                }
            }

            accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            arg "-mixin.config=custommachinery.mixins.json"

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                custommachinery {
                    source sourceSets.main
                    source sourceSets.api
                }
            }

            accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'custommachinery', '--all', '--output', file('src/generated/resources/')

            mods {
                custommachinery {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

repositories {
    maven { //JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { //Crafttweaker
        name = "Jared maven"
        url = "https://maven.blamejared.com"
    }
    maven { // TOP
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }
    maven { //Cursemaven
        name = "Curse maven"
        url = "https://www.cursemaven.com"
    }
    maven { //Mod maven
        name = "Mod maven"
        url = "https://modmaven.dev/"
    }
    maven { //Architectury
        url = "https://maven.architectury.dev"
    }
    maven { //KubeJS/Rhino
        url = "https://maven.saps.dev/minecraft"
    }
    maven { //HyperLightning
        url = "https://maven.hypherionmc.me/releases"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
    implementation fg.deobf("mezz.jei:jei-1.16.5:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:${jei_version}")
    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.16.5:${ct_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    implementation fg.deobf("me.shedaniel:architectury-forge:${architectury_version}")
    implementation(fg.deobf("curse.maven:gadgets-298187:3498508"))

    runtimeOnly fg.deobf("mekanism:Mekanism:1.16.5-10.0.20.447")//Mekanism
    runtimeOnly fg.deobf("curse.maven:spark-361579:3337641")//Spark profiler

    //Jade
    implementation fg.deobf("curse.maven:jade-324717:3875132")

    annotationProcessor "org.spongepowered:mixin:0.8.2:processor"
}

def getManifestAttributes(String title) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "Frinn",
            "Specification-Version"   : project.version,
            "Implementation-Title"    : title,
            "Implementation-Version"  : project.version,
            "Implementation-Vendor"   : "Frinn",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs"            : "custommachinery.mixins.json"
    ]
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir

    manifest.attributes(getManifestAttributes(project.name))
}

task apiJar(type: Jar) {
    archiveClassifier.set("api")
    from sourceSets.api.output
    manifest.attributes(getManifestAttributes(project.name))
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
apiJar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

if (System.getenv("CURSEFORGE")) {
    curseforge {
        apiKey = System.getenv("CURSEFORGE")
        project {
            id = "457017"
            changelogType = "markdown"
            changelog = file("run/changelog-116.md")
            releaseType = "beta"
            mainArtifact(jar) {
                displayName = "Custom-Machinery-${project.version}"
                relations {
                    optionalDependency "crafttweaker"
                    optionalDependency "jei"
                    optionalDependency "the-one-probe"
                    optionalDependency "kubejs"
                    optionalDependency "building-gadgets"
                    optionalDependency "jade"
                }
            }
            addArtifact(apiJar) {
                displayName = "Custom-Machinery-${project.version}-api"
            }
        }
    }
}