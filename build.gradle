plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
    id "me.shedaniel.unified-publishing" version "0.1.+" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.18.2+build.4:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven {
            name = "Latvian maven"
            url = "https://maven.saps.dev/minecraft"
            content {
                includeGroup "dev.latvian.mods"
                includeGroup "dev.ftb.mods"
            }
        }
        maven {
            // location of the maven that hosts JEI files
            name = "Progwml6 maven"
            url = "https://dvs1.progwml6.com/files/maven/"
            content {
                includeGroup "mezz.jei"
            }
        }
        maven {
            name = "Curse maven"
            url = "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name = "Mod maven"
            url = "https://modmaven.dev/"
            content {
                includeGroup "mcjty.theoneprobe"
                includeGroup "mekanism"
            }
        }
        maven {
            name = 'BlameJared Maven'
            url = 'https://maven.blamejared.com'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }
}

def getApiJar() {
    Task task = project(":api").tasks.remapJar
    if (task instanceof AbstractArchiveTask) {
        return task.getProject().provider(() -> {
            var test = (RegularFile)((AbstractArchiveTask)task).getArchiveFile().get()
            return test;
        });
    } else {
        throw new IllegalArgumentException("Task must be an AbstractArchiveTask");
    }
}