plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

repositories {
    mavenLocal()
}

base {
    archivesName = mod_artifact_name
    version = "${minecraft_version}-${mod_version}"
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
java.withSourcesJar()

minecraft.accessTransformers.file rootProject.file("src/main/resources/META-INF/accesstransformer.cfg")

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        name = "Shedaniel's maven"
        url = "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel.cloth"
        }
    }
    maven {
        name = "BlameJared Maven"
        url = "https://maven.blamejared.com"
        content {
            includeGroup "com.blamejared.crafttweaker"
            includeGroup "org.openzen.zencode"
            includeGroup "mezz.jei"
        }
    }
    maven {
        name = "Lat's maven"
        url = "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
    maven {
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven {
        name = "Mod maven"
        url = "https://modmaven.dev/"
        content {
            includeGroup "mcjty.theoneprobe"
            includeGroup "mekanism"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    // Cloth config
    api("me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}")

    // JEI
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    localRuntime("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    // Craft tweaker
    localRuntime compileOnly("com.blamejared.crafttweaker:CraftTweaker-neoforge-${minecraft_version}:${ct_version}")

    // KubeJS
    localRuntime compileOnly("dev.latvian.mods:kubejs-neoforge:${kubejs_version}")

    // Jade
    localRuntime compileOnly("curse.maven:jade-324717:${jade_version}")

    // The one probe
    localRuntime compileOnly("mcjty.theoneprobe:theoneprobe:${top_version}") {transitive = false}

    // Mekanism
    localRuntime("mekanism:Mekanism:${mekanism_version}")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            mod_url                : mod_url
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            groupId = mod_group_id
            artifactId = archivesBaseName
            version = project.version
            from components.java

            pom {
                name = mod_name
                description = mod_description
                packaging = 'jar'
                scm {
                    url = mod_github
                }
                issueManagement {
                    system = 'github'
                    url = mod_issues
                }
                licenses {
                    license {
                        name = mod_license
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = mod_authors
                        name = mod_authors
                        roles = ['developper']
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'maven'
            url = 'https://maven.frinn.fr/repository/maven/'
            credentials {
                username = 'frinn'
                password = System.getenv('MAVEN_PASSWORD')
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

unifiedPublishing {
    project {
        displayName = "[NeoForge]Custom-Machinery-${minecraft_version}-${mod_version}"
        releaseType = "beta"
        if(rootProject.file("CHANGELOG.md").exists()) {
            changelog = rootProject.file("CHANGELOG.md").text
        }
        gameVersions = ["${minecraft_version}", "1.21"]
        gameLoaders = ["neoforge"]
        mainPublication jar

        var CURSE_API_KEY = System.getenv("CURSEFORGE")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = "457017"
                gameVersions.addAll "Java 21"
                relations {
                    depends "cloth-config"
                    optional "kubejs"
                    optional "crafttweaker"
                    optional "jei"
                    optional "the-one-probe"
                    optional "jade"
                }
            }
        }

        var MODRINTH_TOKEN = System.getenv("MODRINTH")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = "OrB5XFtI"
                relations {
                    depends "cloth-config"
                    optional "kubejs"
                    optional "crafttweaker"
                    optional "jei"
                    optional "the-one-probe"
                    optional "jade"
                }
            }
        }
    }
}